{
  "name": "sequest",
  "version": "0.7.0",
  "description": "Simplified API for SSH and SFTP similar to request.",
  "main": "index.js",
  "dependencies": {
    "bl": "^0.8.0",
    "once": "^1.3.0",
    "ssh2": "^0.2.25"
  },
  "devDependencies": {
    "rimraf": "^2.2.8",
    "tape": "^2.13.2"
  },
  "scripts": {
    "test": "tape test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mikeal/sequest"
  },
  "keywords": [
    "ssh",
    "ssh2",
    "sftp",
    "scp",
    "request"
  ],
  "author": {
    "name": "Mikeal Rogers",
    "email": "mikeal.rogers@gmail.com"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/mikeal/sequest/issues"
  },
  "homepage": "https://github.com/mikeal/sequest",
  "readme": "## Sequest -- Simple ssh client\n\n## `sequest(host[, command[, opts]])`\n\nBy default sequest will use your local `ssh-agent` to authenticate to remote hosts which should make it unnecessary to enter username, password or privateKey information.\n\n```javascript\nvar sequest = require('sequest')\nsequest('root@127.0.0.1', 'ls', function (e, stdout) {\n  if (e) throw e\n  console.log(stdout.split('\\n'))\n})\n```\n\n### Continuous mode\n\n```javascript\nvar seq = sequest('root@127.0.0.1')\nseq.pipe(process.stdout) // only necessary if you want to see the output in your terminal\nseq.write('ls -la')\nseq.write('touch testfile')\nseq.write('ls -la')\nseq.end()\n```\n\nEach command will complete before the next is sent to the server. If any command returns a non-zero exit code it will emit an error which effectively ends the stream and the processing of subsequent commands.\n\n### Connection Options\n\nAccepts all [ssh2 connection options](https://github.com/mscdex/ssh2#connection-methods), most of which are unnecessary as you can define user and host information in the host string and because `ssh-agent` authentication is used when not supplying a `privateKey`.\n\nThe most common are listed below.\n\n* **username** - < _string_ > - Username for authentication. **Default:** (none)\n\n* **password** - < _string_ > - Password for password-based user authentication. **Default:** (none)\n\n* **agent** - < _string_ > - Path to ssh-agent's UNIX socket for ssh-agent-based user authentication. `sequest` defaults this to `process.env.SSH_AUTH_SOCK`.\n\n* **privateKey** - < _mixed_ > - Buffer or string that contains a private key for key-based user authentication (OpenSSH format). **Default:** (none)\n\n* **passphrase** - < _string_ > - For an encrypted private key, this is the passphrase used to decrypt it. **Default:** (none)\n\n* **publicKey** - < _mixed_ > - Optional Buffer or string that contains a public key for key-based user authentication (OpenSSH format). If `publicKey` is not set, it will be generated from the `privateKey`. **Default:** (none)\n\n## `.connect(host[, opts])`\n\nConvenience API for making several calls to the same host.\n\n```javascript\nvar seq = sequest.connect('root@127.0.0.1')\nseq('ls', function (e, stdout) {\n  seq('ls '+stdout.split('\\n')[0], function (e, stdout) {\n    console.log(stdout.split('\\n'))\n    seq.end() // will keep process open if you don't end it\n  })\n})\n```\n\n## `.get(host, path[, opts])`\n### get remote file\n\n```javascript\nvar reader = sequest.get('root@127.0.0.1', '/remote/path/to/file')\nreader.pipe(process.stdout)\n```\n\nAlso works with `.connect()`\n\n```javascript\nvar c = sequest.connect('root@127.0.0.1')\n  , reader = c.get('/remote/path/to/file')\n  ;\nreader.pipe(process.stdout)\n```\n\nDefault options, as defined by [ssh2](https://github.com/mscdex/ssh2#sftp-methods), are as follows:\n\n```javascript\n{ flags: 'r',\n  encoding: null,\n  mode: 0666,\n  bufferSize: 64 * 1024\n}\n```\n\n\n## `.put(host, path[, opts])`\n### write remote file\n\n```javascript\nvar writer = sequest.put('root@127.0.0.1', '/remote/path/to/file')\nfs.createReadStream('/local/path').pipe(writer)\nwriter.on('close', function () {\n  // finished writing.\n})\n```\n\nAlso works with `.connect()`\n\n```javascript\nvar c = sequest.connect('root@127.0.0.1')\n  , writer = c.put('/remote/path/to/file')\n  ;\nfs.createReadStream('/local/path').pipe(writer)\nwriter.on('close', function () {\n  // finished writing.\n})\n```\n\nDefault options, as defined by [ssh2](https://github.com/mscdex/ssh2#sftp-methods), are as follows:\n\n```javascript\n{ flags: 'w',\n  encoding: null,\n  mode: 0666,\n  autoClose: true\n}\n```\n\n## Credits\n\nThis would not be possible without [Brian White](https://github.com/mscdex)'s amazing [ssh2](https://github.com/mscdex/ssh2) module.\n",
  "readmeFilename": "README.md",
  "_id": "sequest@0.7.0",
  "dist": {
    "shasum": "2e14b38a9fb727695bab19791beecb4c5e96da3b"
  },
  "_from": "sequest@*",
  "_resolved": "https://registry.npmjs.org/sequest/-/sequest-0.7.0.tgz"
}
